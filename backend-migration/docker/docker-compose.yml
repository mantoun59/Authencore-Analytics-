version: '3.8'

services:
  # Development setup
  authencore-dev:
    build:
      context: ..
      dockerfile: docker/Dockerfile.dev
    ports:
      - "3000:3000"
      - "8080:8080"
    volumes:
      - ../supabase:/app/supabase
      - /app/node_modules
    environment:
      - NODE_ENV=development
      - DATABASE_URL=${DATABASE_URL}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - RESEND_API_KEY=${RESEND_API_KEY}
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
      - SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY}
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
      - CORS_ORIGIN=${CORS_ORIGIN:-http://localhost:3000}
    depends_on:
      - postgres
      - redis
    networks:
      - authencore-network
    profiles:
      - dev

  # Production setup
  authencore-app:
    build:
      context: ..
      dockerfile: docker/Dockerfile.prod
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=${DATABASE_URL}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - RESEND_API_KEY=${RESEND_API_KEY}
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
      - SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY}
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
      - CORS_ORIGIN=${CORS_ORIGIN:-https://yourdomain.com}
      - JWT_SECRET=${JWT_SECRET}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
    depends_on:
      - postgres
      - redis
    networks:
      - authencore-network
    restart: unless-stopped
    profiles:
      - prod

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: authencore_analytics
      POSTGRES_USER: authencore_user
      POSTGRES_PASSWORD: ${DB_PASSWORD:-authencore_password}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ../database:/docker-entrypoint-initdb.d:ro
    networks:
      - authencore-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U authencore_user -d authencore_analytics"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    profiles:
      - dev
      - prod

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - authencore-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    profiles:
      - dev
      - prod

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.prod.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx-logs:/var/log/nginx
    depends_on:
      - authencore-app
    networks:
      - authencore-network
    restart: unless-stopped
    profiles:
      - prod

  # MinIO for S3-compatible storage (development)
  minio:
    image: minio/minio:latest
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-authencore}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-authencore123}
    volumes:
      - minio-data:/data
    command: server /data --console-address ":9001"
    networks:
      - authencore-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    restart: unless-stopped
    profiles:
      - dev

  # Database backup service
  db-backup:
    image: postgres:15-alpine
    environment:
      PGPASSWORD: ${DB_PASSWORD:-authencore_password}
    volumes:
      - ./backups:/backups
      - ../scripts:/scripts:ro
    command: |
      sh -c "
        while true; do
          pg_dump -h postgres -U authencore_user -d authencore_analytics > /backups/backup_$$(date +%Y%m%d_%H%M%S).sql
          find /backups -name 'backup_*.sql' -mtime +7 -delete
          sleep 86400
        done
      "
    depends_on:
      - postgres
    networks:
      - authencore-network
    restart: unless-stopped
    profiles:
      - prod

volumes:
  postgres-data:
    driver: local
  redis-data:
    driver: local
  minio-data:
    driver: local
  nginx-logs:
    driver: local

networks:
  authencore-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
    driver: bridge